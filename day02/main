#! /usr/bin/ruby

Reveal = Struct.new('Reveal', :r, :g, :b)

input = File.read("data/in.txt")
games = {}
input.split("\n").each { |line|
  split = line.split(':')
  game_nb = split[0].match(/Game (\d+)/)[1].to_i
  reveals = split[1].split(';').map(&:strip)
  games[game_nb] = reveals.map do |reveal|
    reveal_parts = reveal.split(',').map(&:strip)
    red = 0
    blue = 0
    green = 0
    reveal_parts.each do |part|
      regex_red_match = part.match /(\d+) red/
      regex_blue_match = part.match /(\d+) blue/
      regex_green_match = part.match /(\d+) green/
      red += regex_red_match[1].to_i if regex_red_match
      blue += regex_blue_match[1].to_i if regex_blue_match
      green += regex_green_match[1].to_i if regex_green_match
    end
    Reveal.new red, green, blue
  end
}
# puts "games_and_reveals: #{games}"

def part_a(games)
  valid_games = games.entries.select do |game|
    is_valid = true
    game[1].each do |reveal|
      is_valid = false if reveal.r > 12 || reveal.g > 13 || reveal.b > 14
    end
    is_valid
  end
  # puts "valid games: #{valid_games}"

  res = valid_games.reduce(0) { |acc, game| acc + game[0] }
  puts "Answer Part A: #{res}"
end

part_a(games)

def power_of(game)
  reveals = game[1]
  reveals.map(&:r).max * reveals.map(&:g).max * reveals.map(&:b).max
end

def part_b(games)
  res = games.entries.map { |game| power_of(game)}.sum
  puts "Answer Part B: #{res}"
end

part_b(games)
