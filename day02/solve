#!/usr/bin/env ruby

require '../cmd_line_parser'

END {
  run :part1, :part2
}

Reveal = Struct.new('Reveal', :r, :g, :b)

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  games = read_games(input)
  valid_games = games.entries.select do |game|
    is_valid = true
    game[1].each do |reveal|
      is_valid = false if reveal.r > 12 || reveal.g > 13 || reveal.b > 14
    end
    is_valid
  end
  # puts "valid games: #{valid_games}"

  res = valid_games.reduce(0) { |acc, game| acc + game[0] }
  puts "Answer Part 1: #{res}"
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  games = read_games(input)
  res = games.entries.map { |game| power_of(game)}.sum
  puts "Answer Part 2: #{res}"
end

def read_games(input)
  games = {}
  input.split("\n").each { |line|
    split = line.split(':')
    game_nb = split[0].match(/Game (\d+)/)[1].to_i
    reveals = split[1].split(';').map(&:strip)
    games[game_nb] = reveals.map do |reveal|
      reveal_parts = reveal.split(',').map(&:strip)
      red = 0
      blue = 0
      green = 0
      reveal_parts.each do |part|
        regex_red_match = part.match /(\d+) red/
        regex_blue_match = part.match /(\d+) blue/
        regex_green_match = part.match /(\d+) green/
        red += regex_red_match[1].to_i if regex_red_match
        blue += regex_blue_match[1].to_i if regex_blue_match
        green += regex_green_match[1].to_i if regex_green_match
      end
      Reveal.new red, green, blue
    end
  }
  games
end

def power_of(game)
  reveals = game[1]
  reveals.map(&:r).max * reveals.map(&:g).max * reveals.map(&:b).max
end